on:
  pull_request:
  push:
  
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    env:
      IGNORE_CONDA: true
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-latest]
        python-version: ["3.9", "3.10", "3.11"]
      fail-fast: true
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Use intel mpi on windows
      - uses: mpi4py/setup-mpi@v1
        if: ${{ contains(matrix.os, 'windows') }}
        with:
          mpi: intelmpi

      # Else, use the default for the OS and setup-mpi action
      - uses: mpi4py/setup-mpi@v1
        if: ${{ !contains(matrix.os, 'windows') }}

      # Setup openmp on macOS
      - name: Install openmp if on macos
        if: ${{ contains(matrix.os, 'macos') }}
        run: |
          brew install libomp llvm

      - name: Upgrade pip
        run: |
          python3 -m pip install -U pip

      - name: Run tests and other checks
        if: runner.os == 'Linux'
        run: |
          ./pr-check.sh

      - name: Run tests and other checks
        if: runner.os == 'macOS'
        run: |
          export CLANG_PREFIX=$(brew --prefix llvm)
          export CC=$CLANG_PREFIX/bin/clang
          export CXX=$CLANG_PREFIX/bin/clang++
          ./pr-check.sh    

      # - uses: codecov/codecov-action@v1

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Use intel mpi on windows
      - uses: mpi4py/setup-mpi@v1
        if: ${{ contains(matrix.os, 'windows') }}
        with:
          mpi: intelmpi

      # Else, use the default for the OS and setup-mpi action
      - uses: mpi4py/setup-mpi@v1
        if: ${{ !contains(matrix.os, 'windows') }}

      - name: Checkout LLVM on macOS
        if: runner.os == 'macOS'
        uses: actions/checkout@v4
        with:
          repository: llvm/llvm-project
          ref: release/18.x
          path: llvm-project

      - name: Build OpenMP on macOS
        if: runner.os == 'macOS'
        env:
          MACOSX_DEPLOYMENT_TARGET: "10.9"
        working-directory: llvm-project
        run: |
          cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=$(brew --prefix) \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DLIBOMP_INSTALL_ALIASES=OFF \
            -S openmp \
            -B build
          cmake --build build --parallel
          cmake --install build

      # Used to host cibuildwheel
      - uses: actions/setup-python@v5

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
       
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  conda:
    name: Build conda package on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -leo pipefail {0}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-13, macos-latest]
        python-version: ['3.9', '3.10', '3.11']
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Can't figure out a way to get the package version from setuptools_scm inside the conda build
      # We need to install setuptools_scm, call it as a module, and store the version in an environment variable
      - name: Run setuptools_scm to get package version and store in environment variable BRAINIAK_VERSION (Linux\Mac)
        if: ${{ !contains(matrix.os, 'windows') }}
        run: |
          python -m pip install setuptools_scm
          export BRAINIAK_VERSION=$(python -m setuptools_scm)
          echo "BRAINIAK_VERSION=${BRAINIAK_VERSION}" >> "$GITHUB_ENV"

      - name: Run setuptools_scm to get package version and store in environment variable BRAINIAK_VERSION (Windows)
        if: ${{ contains(matrix.os, 'windows') }}
        run: |
          python -m pip install setuptools_scm
          set BRAINIAK_VERSION=$(python -m setuptools_scm)
          echo "BRAINIAK_VERSION=${BRAINIAK_VERSION}" >> "$GITHUB_ENV" 

      - name: Setup micromamba and boa
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-name: test-env
          create-args: >-
            python=${{ matrix.python-version }}
            conda-forge::conda-build
            boa
          init-shell: >-
            bash
            powershell

      - name: Build and test package
        id: build-package
        run: |
          conda config --add channels conda-forge
          conda config --set channel_priority strict
          conda mambabuild --output-folder=conda_build .conda/

      - uses: actions/upload-artifact@v4
        with:
          name: conda_build-${{ matrix.os }}-${{ matrix.python-version }}
          path: conda_build


  publish_conda:
    name: Publish to Anaconda
    needs: [conda, tests]
    environment: anaconda
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: artifact
          path: ${{ steps.build-package.outputs.PACKAGE_PATH }}

      - name: List files in artifact
        run: find ${{ steps.build-package.outputs.PACKAGE_PATH }} -type f -name "*.tar.bz2"

      - name: Upload to Anaconda
        run: |
          export ANACONDA_API_TOKEN=${{ secrets.ANACONDA_TOKEN }}
          find ${{ steps.build-package.outputs.PACKAGE_PATH }} -type f -name "*.tar.bz2" -exec echo "anaconda upload {}" \;

  dist:
    name: Distribution build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: hynek/build-and-inspect-python-package@v1
        
  publish_pypi:
    name: Publish to PyPI
    needs: [dist, tests, conda]
    environment:
      name: pypi
      url: https://pypi.org/p/brainiak
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: Packages
          path: dist

      - uses: pypa/gh-action-pypi-publish@release/v1
